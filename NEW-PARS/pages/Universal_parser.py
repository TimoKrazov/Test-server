import streamlit as st
import pandas as pd
from back import backend

st.set_page_config(
    page_title="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä",
    page_icon="üè≥Ô∏è‚Äçüåà", layout="wide"
)

st.markdown("""
            <style>
            /*–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*/
                /*–§–æ–Ω —Ç–µ–ª–∞ (–í–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ–Ω–∞)*/
                body {
                    background-color: rgb(0,80,78);
                }
                /*–§–æ–Ω —Ç–µ–ª–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω)*/
                .main {
                    background-color: rgb(230, 230, 230);
                }
                /*–®–∞–ø–∫–∞*/
                .st-emotion-cache-18ni7ap{
                    background: rgb(128,128,128);
                }
                .st-emotion-cache-1avcm0n{
                    background: rgb(128,128,128);
                }
                /*–ó–∞–≥–æ–ª–æ–≤–æ–∫*/
                .st-emotion-cache-10trblm{
                    color: rgb(49, 51, 63);
                }
                /*–¢–µ–∫—Å—Ç*/
                .new_text {
                    color: rgb(49, 51, 63);
                    font-size:20px;
                }
                .st-emotion-cache-1cypcdb{
                    background-color: rgb(0,80,78);
                    top: 0px;
                    height: 100% !important;
                }
                /*—Ñ–æ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è –±–æ–∫ –ø–∞–Ω–µ–ª–∏*/
                .stApp {
                    background-color: rgb(179, 179, 179);
                }
                /*—Ü–≤–µ—Ç –±–æ–∫ –ø–∞–Ω–µ–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏—è*/    
                .st-emotion-cache-rawifx  {
                    background-color: rgb(0,80,78);
                }
                /*—Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–∂–∞—Ç–∏—è*/
                .st-emotion-cache-1uy0bt2:active {
                    background: rgb(179, 179, 179);
                }
                .st-emotion-cache-1uy0bt2:visited{
                    background: rgb(240, 73, 35);
                }
                /*–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏*/
                .st-emotion-cache-1m6wrpk{
                    color: rgb(240,73,35);
                }
                /*–∫–Ω–æ–ø–æ—á–∫–∏*/
                .eczjsme6 {
                    background: rgb(0,80,78);
                }
                .st-emotion-cache-1we6k59:hover {
                    background: rgb(179,179,179);
                    color: rgb(240, 73, 35) !important;
                }
                .st-emotion-cache-1uy0bt2:hover {
                    background: rgb(240, 73, 35);
                }
                /*—Ü–≤–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∏–º–ª–∏—Ç–∞*/
                .st-emotion-cache-13k62yr {
                    color: rgb(240 73 35);
                }
                /*—Å—Ç—Ä–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ–∫ –ø–∞–Ω–µ–ª–∏*/
                .st-emotion-cache-1pbsqtx {
                    color: rgb(240, 73, 35);
                }
                .st-emotion-cache-a7yjq {
                    background-color: rgb(0,80,78);
                }
            </style>
        """, unsafe_allow_html=True)
st.markdown("""
            <style>
                /*–¢–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤*/
                .st-emotion-cache-sh2krr {
                    color: rgb(49, 51, 63);
                }
                /*–ü–æ–ª–æ—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤*/
                .e1b2p2ww15 {
                    background-color: rgb(153, 153, 153);
                    color: rgb(49, 51, 63);
                }
                .e1bju1570 {
                    color: rgb(49, 51, 63);
                }
                /*–æ–±–ª–∞—á–∫–æ*/
                .ex0cdmw0 {
                    color: rgb(240, 73, 35);
                }
                /*–∫–Ω–æ–ø–æ—á–∫–∞*/
                .ef3psqc12 {
                    background-color: rgb(153, 153, 153);
                    border: 5px solid rgba(49, 51, 63, 0.2);
                    color: rgb(49, 51, 63);
                }
                .ef3psqc12:active {
                    background-color: rgb(153, 153, 153);
                    border-color: rgb(240,73,35);
                    color: rgb(240,73,35);
                }
                        /*—Ñ–æ–Ω –º–µ—Ç–æ–¥–æ–≤*/
                .st-bb {
                    background-color: rgb(240, 73, 35);
                    color: rgb(250, 250, 250);
                }
                /*–≥—Ä–∞–Ω–∏—Ü—ã*/
                .st-cq {
                    border-bottom-color:rgb(255, 75, 75);
                    border-top-color: rgb(255, 75, 75);
                    border-right-color: rgb(255, 75, 75);
                    border-left-color: rgb(255, 75, 75);
                }
                .st-ba {
                    border-bottom-color:rgb(255, 75, 75);
                    border-top-color: rgb(255, 75, 75);
                    border-right-color: rgb(255, 75, 75);
                    border-left-color: rgb(255, 75, 75);
                }
                .st-emotion-cache-15wihvi, .st-emotion-cache-15wihvi:active, .st-emotion-cache-15wihvi:focus-visible {
                    background: rgb(240,73,35) !important;
                    color: rgb(0,80,78);
                }
                .st-emotion-cache-au5mm0 {
                    background:rgb(153, 153, 153);
                    color: rgb(0,80,78);
                }
                .st-emotion-cache-oteskg:hover:enabled, .st-emotion-cache-oteskg:focus:enabled {
                    background:rgb(153, 153, 153);
                    color: rgb(0,80,78);
                    transition: none 0s ease 0s;
                    outline: none;
                }
                /*—Ç–µ–∫—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π*/
                .e1nzilvr5 {
                    color: rgb(240,73,35);
                }
                /*+ –∏ -*/
                .st-emotion-cache-oteskg {
                    background: rgb(153, 153, 153);
                }
                /*—Ç–µ–∫—Å—Ç +-*/
                .st-emotion-cache-f2zl0u{
                    color: rgb(0,80,78);
                }
                .st-emotion-cache-14zer8g{
                    color: rgb(0,80,78);
                }
            </style>
            """, unsafe_allow_html=True)

st.title('–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Excel-—Ñ–∞–π–ª–æ–≤')


#–ù–µ–∫–∞—è —Ç–∏–ø–æ –ª–æ–≥–∏–∫–∞
def get_files() -> list:
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã Excel", type=["xls", "xlsx"], accept_multiple_files=True)
    return uploaded_files


files = get_files()
if files:
    selected_ranges = st.session_state.get("selected_ranges", [])
    #–ò–Ω–¥–µ–∫—Å—ã –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–µ—Ä–Ω—ã–µ, –Ω–æ –ø–æ—Ç–æ–º —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–∞ 1 –±–æ–ª—å—à–µ, —á–µ–º –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å, –Ω–∞–¥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
    for uploaded_file in files:
        st.write(f"### {uploaded_file.name}")
        df = pd.read_excel(uploaded_file, index_col=None)
        new_row = pd.DataFrame([pd.Series([pd.NA] * len(df.columns))], columns=df.columns)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ concat() –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º DataFrame
        df = pd.concat([new_row, df]).reset_index(drop=True)
        search = r'\b 0 | [0-9]{1000}'
        df.index += 1
        number = 1
        for column in df.columns:
            word = str(column)
            if 'Unnamed:' in word:
                df.rename(columns={word: number}, inplace=True)
                number += 1
            else:
                df.at[1, column] = column
                df.rename(columns={column: number}, inplace=True)
                number += 1
        st.write(df)

        if df.empty:
            st.write("–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ.")
        else:
            backend.add_selected_range(df, selected_ranges)
            st.session_state["selected_ranges"] = selected_ranges
            if selected_ranges:
                if st.button("–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤"):
                    all_selected_ranges = backend.get_selected_ranges(df, selected_ranges)
                    if len(all_selected_ranges) == 1:
                        st.write("–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω:")
                    else:
                        st.write("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:")
                    for selected_data in all_selected_ranges:
                        st.write(selected_data)
                    # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ csv-—Ñ–∞–π–ª–∞
                    sd = backend.convert_to_csv(all_selected_ranges)
                    download = st.download_button(
                        label="Download data as CSV",
                        data=sd,
                        file_name='–†–µ–∑—É–ª—å—Ç–∞—Ç.csv',
                        mime='text/csv'
                    )
                if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã"):
                    st.session_state["selected_ranges"] = []
                st.write("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:")
                for i in range(1, len(selected_ranges) + 1):
                    st.write(f"–î–∏–∞–ø–∞–∑–æ–Ω {i}:")
                    st.write(backend.chooses_ranges(df, selected_ranges[i - 1]))
